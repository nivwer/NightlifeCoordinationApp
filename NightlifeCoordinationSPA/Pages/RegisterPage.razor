@page "/register"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<PageTitle>Nightlife - Register</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="pa-10 my-10">
        <MudText Typo="Typo.h4">Register</MudText>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />

            <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid" })" />

            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                InputType="InputType.Password" Required="true" RequiredError="Password is required!"
                Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" />

            <MudTextField T="string" Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                Validation="@(new Func<string, string?>(PasswordMatch))" />

            <div class="d-flex align-center justify-space-between">
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">
                    Register
                </MudButton>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? pwField1;
    MudForm? form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (pwField1 != null && pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}
